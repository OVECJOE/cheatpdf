generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  STUDENT
}

enum SubscriptionStatus {
  FREE
  ACTIVE
  CANCELED
  PAST_DUE
}

enum MessageRole {
  USER
  ASSISTANT
}

enum ExamStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
}

enum DonationStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum DonationFrequency {
  MONTHLY
  QUARTERLY
  BIANNUAL
}

enum DocumentExtractionStage {
  PDF_PARSE
  PDF_LOADER
  PER_PAGE
  CHUNKING
  VALIDATING
  VECTORIZING
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?

  // Profile information
  userType            UserType @default(STUDENT)
  country             String?
  language            String   @default("en")
  educationLevel      String?
  subjects            String[] @default([])
  studyGoals          String?
  examType            String?
  onboardingCompleted Boolean  @default(false)

  // Subscription
  subscriptionStatus SubscriptionStatus @default(FREE)
  subscriptionEnds   DateTime?
  stripeCustomerId   String?

  accounts       Account[]
  sessions       Session[]
  documents      Document[]
  chats          Chat[]
  exams          Exam[]
  beneficiaries  StudentBeneficiary[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Document {
  id              String                  @id @default(cuid())
  name            String
  fileName        String
  fileSize        Int
  contentType     String
  content         String                  @db.Text
  vectorized      Boolean                 @default(false)
  extractionStage DocumentExtractionStage @default(PDF_PARSE)
  fileData        String?

  userId        String
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  chats Chat[]
  exams Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

model Chat {
  id    String @id @default(cuid())
  title String

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chats")
}

model Message {
  id      String      @id @default(cuid())
  content String      @db.Text
  role    MessageRole

  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("messages")
}

model Exam {
  id             String     @id @default(cuid())
  title          String
  timeLimit      Int // in minutes
  totalQuestions Int
  status         ExamStatus @default(NOT_STARTED)
  score          Float?
  startedAt      DateTime?
  completedAt    DateTime?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  documentId String
  document   Document @relation(fields: [documentId], references: [id], onDelete: Cascade)

  questions ExamQuestion[]
  answers   ExamAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exams")
}

model ExamQuestion {
  id            String   @id @default(cuid())
  question      String   @db.Text
  options       String[] @default([])
  correctAnswer String
  explanation   String   @db.Text

  examId String
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  answers ExamAnswer[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exam_questions")
}

model ExamAnswer {
  id        String  @id @default(cuid())
  answer    String
  isCorrect Boolean

  examId String
  exam   Exam   @relation(fields: [examId], references: [id], onDelete: Cascade)

  questionId String
  question   ExamQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("exam_answers")
}

model Donation {
  id                String            @id @default(cuid())
  donorEmail        String
  donorName         String?
  amount            Float // Amount in USD
  stripeSessionId   String?           @unique
  stripePaymentId   String?           @unique
  status            DonationStatus    @default(PENDING)
  targetCountry     String? // Target country for donation
  targetLanguage    String? // Target language for donation
  studentsToHelp    Int // Number of students to help
  donationFrequency DonationFrequency
  metadata          Json? // Additional data from Stripe
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  beneficiaries StudentBeneficiary[]

  @@map("donations")
}

model StudentBeneficiary {
  id            String   @id @default(cuid())
  userId        String // Student who benefited
  donationId    String // Which donation funded this
  monthsGranted Int // How many months of pro access granted
  grantedAt     DateTime @default(now())
  expiresAt     DateTime // When the pro access expires

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  donation Donation @relation(fields: [donationId], references: [id], onDelete: Cascade)

  @@unique([userId, donationId])
  @@map("student_beneficiaries")
}

model DonationStats {
  id                    String   @id @default(cuid())
  totalDonations        Float    @default(0)
  totalStudentsHelped   Int      @default(0)
  currentMonthDonations Float    @default(0)
  currentMonthStudents  Int      @default(0)
  lastUpdated           DateTime @default(now())

  @@map("donation_stats")
}
